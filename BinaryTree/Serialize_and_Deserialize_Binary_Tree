class Codec {
public:

    // Encodes a tree to a single string.
    string serialize(TreeNode* root) {
        std::string result{""};
        std::queue<TreeNode*> Qu;
        Qu.push(root);
        
        while(!Qu.empty()){
            TreeNode* curr = Qu.front();
            Qu.pop();
            
            if(curr){
                result += std::to_string(curr->val) + " ";
                Qu.push(curr->left);
                Qu.push(curr->right);
            }
            else{
                result += "# " ;
            }
        }
        result.erase(result.length()-1);
        return result;
        
    }

    // Decodes your encoded data to tree.
    TreeNode* deserialize(string data) {
        
        
        
        std::istringstream data_stream(data);
        
        string word{""};
        
        data_stream >> word;
        TreeNode* root{nullptr};
        if(word!="#")
            root = new TreeNode(std::stoi(word));
        
        else 
            return nullptr;
        
        std::queue<TreeNode*> Qu;
        Qu.push(root);
        int cnt{0};
        
        
        while(data_stream >> word){

            if(cnt == 0)
            {
                if(word!="#")
                {
                    TreeNode* node = new TreeNode(std::stoi(word));
                    Qu.front()->left = node;
                    Qu.push(node);
                }
                else{
                    Qu.front()->left = nullptr;
                }
                
                cnt++;
            }
            else if(cnt == 1){
                if(word!="#")
                {
                    TreeNode* node = new TreeNode(std::stoi(word));
                    Qu.front()->right = node;
                    Qu.push(node);
                }
                else{
                    Qu.front()->right = nullptr;
                }
                cnt++;
            }
            
            
            if (cnt == 2){
                cnt = 0;
                Qu.pop();
            }
            
            word.clear();            
        }
        
        return root;
    }
    
};
