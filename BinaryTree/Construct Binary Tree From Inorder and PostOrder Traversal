#include <vector>
#include <unordered_map>

struct TreeNode {
     int val;
     TreeNode *left;
     TreeNode *right;
     TreeNode() : val(0), left(nullptr), right(nullptr) {}
     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 };

class Solution {
public:

    std::unordered_map<int, int> hash;
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        /*Create a hashmap for inorder data*/
        
        for(int i=0; i< inorder.size(); i++){
            hash.insert(std::make_pair(inorder[i], i));
        }
        
        return Recur(inorder, 0, inorder.size()-1, postorder, 0, postorder.size()-1);
    }
    
    
    TreeNode* Recur(vector<int> inor, int inSt, int inEnd, vector<int> postor, int poSt, int poEnd){
        
        if(inEnd < inSt || poEnd < poSt)
            return nullptr;

        TreeNode* Node  = new TreeNode(postor[poEnd]);
        if(inSt == inEnd || poSt == poEnd)
            return Node;

        int in_index = hash[postor[poEnd]];
        
        int po_index = in_index - inSt;
        
        Node->left = Recur(inor, inSt, in_index-1, postor, poSt, poSt + po_index-1);
        Node->right = Recur(inor, in_index+1, inEnd, postor, poSt + po_index, poEnd-1);
       
        return Node;
    }
    

};
