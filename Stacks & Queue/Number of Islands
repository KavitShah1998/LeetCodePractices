   /*
   ***************** Working with Unordered_Set / Unordered_Map of std::pair<,> will produce an error because the STL does not provide hashing required by un_sets and un_maps for std::pairs/
   // In such a case using the following approach to create our own hashing is one solution,
   // std::unordered_set<Pair, pair_hash> Sett;
   
   //The other alternative is using the hash functions included in the Boost Library
   // std::unordered_set<Pair, boost::hash<Pair>> Sett;
   
   
   typedef std::pair<int, int> Pair;
    struct pair_hash{
        std::size_t operator() (const Pair& p) const{
            std::size_t h1= std::hash<int>() (p.first);
            std::size_t h2= std::hash<int>() (p.second);
            return h1^h2;
        }
    };
    ****************
    */
    void Explore(std::vector<std::vector<char>>& grid,std::vector<std::vector<bool>>& visited, int i, int j ){
        int row = grid.size();
        int col = grid[0].size();
        
        if(i < 0 || j < 0 || i >=row || j >=col){
            return;
        }
        
        if(grid[i][j]=='0' || visited[i][j]){
            return;
        }
        
        visited[i][j] = true;
        
        Explore(grid, visited, i-1, j);
        Explore(grid, visited, i+1, j);
        Explore(grid, visited, i, j+1 );
        Explore(grid, visited, i, j-1);
        
        return;
    } 
    
    int numIslands(vector<vector<char>>& grid) {
        
        int rows = grid.size();
        if (rows==0)
            return 0;
        int cols = grid[0].size();
        std::vector<std::vector<bool>> visited(rows, std::vector<bool>(cols, false ));
        
        int count{0};
             
        for(int r = 0; r<rows; r++){
            for(int c = 0; c<cols; c++){
                if(grid[r][c]=='1' && !visited[r][c]){
                    count++;
                    Explore(grid,visited, r, c);
                }
            }
        }
        return count;
    }
    
};
